### **技术路线：HTML 文件差异对比与高亮显示**

#### **背景**
在对比两个 HTML 文件时，通常会面临一些挑战，如：
- **标签顺序不同**：两个文件的标签顺序不同但表示相同的内容时，普通的文本对比方法可能会误判它们为不同。
- **空行和空列**：有时，HTML 文件中的空行或空列可能导致对比错位，影响最终结果。
- **新增和删除的内容**：希望仅标记 `file1` 中的变化，同时对 `file2` 中的新增内容也进行显示。

#### **目标**
- 比较两个 HTML 文件，并标记它们之间的差异。
- **高亮显示** `file1` 中的 **删除** 内容（红色背景和删除线），**高亮显示** `file2` 中的 **新增** 内容（绿色背景）。
- **处理表格** 数据，确保标签按正确的顺序对比，即使行列顺序不同也不会误判差异。
- **忽略空行、空列** 和 **多余空格**，确保对比准确。

#### **技术路线**
##### **1. 文件读取与解析**
- 使用 Python 内置的 `open()` 函数读取 HTML 文件内容，采用 UTF-8 编码。
- 使用 **BeautifulSoup** 解析 HTML 文件，获取 HTML 树结构中的所有标签。
  - `BeautifulSoup(html, "html.parser")` 用于解析 HTML 内容，方便进一步操作。

##### **2. 处理文本差异对比**
- **文本归一化**：
  - 为了去除空格、换行符等对比影响，使用 `normalize_text()` 函数将所有文本中的空白字符（空格、换行符、制表符）统一归一化，替换为单一空格。
  - 示例：`"   text\nwith\tspaces ".split()` 结果是 `"text with spaces"`。

- **对比文本**：
  - 使用 **`difflib.SequenceMatcher`** 来对比两个文本的差异，生成“差异操作码”。
  - 对于每个差异操作码：
    - **`replace`** 和 **`delete`**：标记为 `file1` 中的 **删除内容**（红色背景）。
    - **`insert`**：标记为 `file2` 中的 **新增内容**（绿色背景）。

##### **3. 处理 HTML 表格（表格结构对比）**
- **行数对齐**：
  - 在对比 `<table>` 时，我们需要确保即使 `file1` 和 `file2` 中的表格行数不同，也能正确对比相同内容。
  - **`zip()`** 方法用于遍历两个 HTML 表格标签列表，取 **最小的行数** 进行对比。

- **列数对齐**：
  - 对于每一行的 `<td>` 或 `<th>`，首先获取该行的所有列（`find_all("td")`），确保每一列内容对应对比。

- **逐列对比**：
  - 比较每一列的内容，使用 `get_text()` 提取每列的文本并标准化，忽略标签中的空白符。
  
- **差异标记**：
  - 将 **`file1`** 中不相同的部分标记为删除线（红色），**`file2`** 中新增的部分高亮显示为绿色。

##### **4. 生成差异报告（HTML 格式输出）**
- **标记差异**：
  - 使用 `BeautifulSoup` 对比和高亮后的内容，将修改后的 HTML 树结构重新转换为 HTML 字符串。
  - 使用 `<span class="diff_sub">` 标签包裹 **删除的内容**，使用 `<span class="diff_add">` 包裹 **新增的内容**，确保显示效果直观。

- **输出差异报告**：
  - 使用 **`open()`** 函数将最终生成的 HTML 差异报告写入指定的文件中，并使用适当的 CSS 样式定义 **高亮标记**。

##### **5. CSS 样式设计**
- **样式定义**：
  - `diff_add`：使用绿色背景和加粗文本来突出显示 **新增的内容**。
  - `diff_sub`：使用红色背景并加删除线来显示 **删除的内容**。

### **技术栈**
- **Python**：用于文件操作、字符串处理、差异对比。
- **BeautifulSoup**：用于 HTML 解析和操作。
- **difflib**：用于对比文本内容并计算差异。
- **CSS**：用于美化差异报告，突出显示删除和新增内容。

---

### **伪代码/流程图**
1. **读取 HTML 文件**：
   - 读取 `file1.html` 和 `file2.html` 内容。
2. **解析 HTML**：
   - 使用 `BeautifulSoup` 解析两个文件中的 HTML 内容。
3. **归一化文本**：
   - 标准化每行的文本内容，去除多余空格、换行符等。
4. **对比内容**：
   - 使用 `difflib.SequenceMatcher` 对比 `file1` 和 `file2` 中的文本内容。
5. **标记差异**：
   - 对比文本中的差异部分并进行高亮显示。
6. **生成报告**：
   - 使用 `BeautifulSoup` 将标记差异后的 HTML 内容输出到 `diff.html` 文件中。

---

### **优势**
- **忽略顺序差异**：即使标签顺序不同或嵌套层次不同，仍能正确比较文本内容。
- **清晰的差异展示**：用不同的颜色和样式清晰显示新增和删除的内容，方便用户查看。
- **自动化处理**：自动生成差异报告，避免手动对比。

### **总结**
该技术路线通过结合 `BeautifulSoup` 解析 HTML，`difflib` 对比文本差异，并结合 CSS 高亮显示差异，能够有效地对比 HTML 文件的差异，确保不管是表格内容的顺序变化、空行变化，还是文件的新增内容，都能准确标记出来。
