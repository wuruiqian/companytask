import difflib
import os
from itertools import zip_longest
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
import base64


# 读取文件
def read_html(filename):
    try:
        with open(filename, 'r', encoding='windows-1252') as f:
            return f.read()
    except FileNotFoundError:
        print(f"wrong, can't find '{filename}' ")
        exit(1)

# 去除空白字符
def normalize_text(text):
    return " ".join(text.split())

# 获取标签内所有文本内容
def get_text(tag):
    if tag:
        return normalize_text(tag.get_text())
    return ""

# 对比文本差异
def highlight_text_diff(old_text, new_text, other_text=None):
    differ = difflib.SequenceMatcher(None, old_text, new_text)
    result = []
    for tag, i1, i2, j1, j2 in differ.get_opcodes():
        if tag == 'equal':
            result.append(old_text[i1:i2])
        elif tag in ('replace', 'delete'):
            result.append(f'<span class="diff_sub">{old_text[i1:i2]}</span>')
        elif tag == 'insert':
            result.append(f'<span class="diff_add"></span>')

    if other_text:
        result.append(f'<span class="other_text">{other_text}</span>')
    return ''.join(result)

# 将 th 转换为 td
def unify_th_to_td(table):
    for th in table.find_all("th"):
        th.name = "td"

# 跳过空行
def skip_empty_row(row):
    return not any(td.get_text(strip=True) for td in row.find_all("td"))

# 比较两个 HTML 文件，生成差异标注
def mark_differences(file1, file2, output_file='diff.html'):
    html1 = read_html(file1)
    html2 = read_html(file2)

    soup1 = BeautifulSoup(html1, "html.parser")
    soup2 = BeautifulSoup(html2, "html.parser")
    tables1 = soup1.find_all("table")
    tables2 = soup2.find_all("table")

    for table1, table2 in zip(tables1, tables2):
        unify_th_to_td(table1)
        unify_th_to_td(table2)
        body1 = table1.find("tbody") or table1
        body2 = table2.find("tbody") or table2
        rows1 = body1.find_all("tr")
        rows2 = body2.find_all("tr")
        rows1 = [row for row in rows1 if not skip_empty_row(row)]
        rows2 = [row for row in rows2 if not skip_empty_row(row)]
        max_rows = max(len(rows1), len(rows2))
        for row1, row2 in zip_longest(rows1, rows2, fillvalue=None):
            if not row1 or not row2:
                continue

            cols1 = row1.find_all("td") if row1 else []
            cols2 = row2.find_all("td") if row2 else []

            max_cols = max(len(cols1), len(cols2))
            cols1 = cols1 + [None] * (max_cols - len(cols1))
            cols2 = cols2 + [None] * (max_cols - len(cols2))

            for col1, col2 in zip(cols1, cols2):
                text1 = get_text(col1) if col1 else ""
                text2 = get_text(col2) if col2 else ""
                if text1 != text2:
                    other_text = get_text(col2) if col2 else ""
                    diff_html = highlight_text_diff(text1, text2, other_text)
                    if col1:
                        col1.clear()
                        col1.append(BeautifulSoup(diff_html, "html.parser"))

    # 自定义 CSS 样式
    styled_content = f"""
    <html>
    <head>
        <meta charset="utf-8">
        <title>HTML 差异标注</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 20px;
            }}
            .diff_add {{
                background-color: #d4fcbc;  /* 绿色 - 新增内容 */
                color: green;
                font-weight: bold;
            }}
            .diff_sub {{
                background-color: #ffb6ba;  /* 红色 - 删除内容 */
                color: red;
            }}
            .other_text {{
                color: blue;
            }}
        </style>
    </head>
    <body>
        {str(soup1)}
    </body>
    </html>
    """

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(styled_content)
    print(f"差异标注报告已生成：{output_file}")

# 在报告中生成总结
def generate_summary_report(result_folder, summary_folder):
    result_files = os.listdir(result_folder)
    result_html_files = [f for f in result_files if f.endswith("_result.html")]

    summary_data = []
    for result_file in result_html_files:
        file_path = os.path.join(result_folder, result_file)
        summary_data.append([result_file, f'<a href="{file_path}">查看差异</a>'])

    summary_df = pd.DataFrame(summary_data, columns=["File Name", "Comparison Result"])

    # 生成报告的HTML文件
    summary_html = summary_df.to_html(escape=False)
    output_summary_path = os.path.join(summary_folder, "summary_report.html")
    with open(output_summary_path, "w", encoding="utf-8") as f:
        f.write(summary_html)
    print(f"总结报告已生成：{output_summary_path}")

# 生成饼图
def generate_pie_chart_base64(summary_df):
    status_counts = summary_df['Comparison Result'].value_counts()
    labels = status_counts.index
    sizes = status_counts.values
    total = sum(sizes)

    labels = [f"{label} ({count}, {count/total:.1%})" for label, count in zip(labels, sizes)]

    fig, ax = plt.subplots(figsize=(6, 6))
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, 
           colors=['#4CAF50', '#FF9800', '#F44336', '#2196F3'])
    ax.set_title("Pie Chart of Tables Comparison Result")

    buf = BytesIO()
    plt.savefig(buf, format="png", bbox_inches="tight")
    plt.close(fig)
    buf.seek(0)
    img_base64 = base64.b64encode(buf.read()).decode('utf-8')
    return f"data:image/png;base64,{img_base64}"

# 生成总结HTML并嵌入饼图和差异报告链接
def generate_summary_html(summary_df, result_folder, output_path):
    pie_chart_img = generate_pie_chart_base64(summary_df)

    summary_table_html = summary_df.to_html(index=False, escape=False, classes="table table-bordered")

    html_content = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>C3421010 Tables Comparison Summary</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            .table {{ width: 100%; border-collapse: collapse; margin-top: 20px; font-size: 10pt; }}
            .table th, .table td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            .table th {{ background-color: #4CAF50; color: white; }}
            img {{ width: 100%; max-width: 600px; height: auto; }}
            .download-btn {{ background-color: #4CAF50; color: white; padding: 10px 15px; border: none; 
                            cursor: pointer; margin-top: 20px; }}
            .download-btn:hover {{ background-color: #45a049; }}
        </style>
    </head>
    <body>
        <h2>C3421010 Tables Comparison Summary</h2>
        
        <div>
            <img src="{pie_chart_img}" alt="Pie Chart">
        </div>

        <div>
            <h3>Comparison Summary</h3>
            {summary_table_html}
            <button class="download-btn" onclick="exportTableToExcel()">Download Excel</button>
        </div>
    </body>
    </html>
    """

    with open(output_path, "w", encoding="utf-8") as file:
        file.write(html_content)

    print(f"Summary HTML generated: {output_path}")

# 主程序
if __name__ == "__main__":
    folder1 = 'CDARS'
    folder2 = 'SIGMA'
    result_folder = 'RESULT_Complex'
    summary_folder = 'SUMMARY_Complex'

    compare_folders(folder1, folder2, result_folder)
    generate_summary_report(result_folder, summary_folder)
    summary_df = pd.read_html(os.path.join(summary_folder, "summary_report.html"))[0]
    generate_summary_html(summary_df, result_folder, os.path.join(summary_folder, "final_summary_report.html"))
